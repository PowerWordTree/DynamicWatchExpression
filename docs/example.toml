# logs: list[
#     list[
#         Log{
#             output: string,
#             output_format: string,
#             level: string,
#             text_format: string,
#             data_format: string,
#             level_filters: list[string],
#             name_filters: list[string],
#             msg_filters: list[string],
#         }
#     ]
# ]
# watchers: list[
#     list[
#         Watcher{
#             name: string,
#             interval: float,
#             tolerance: int,
#             expression: string,
#             fetches: list[
#                 Group{
#                     name: string,
#                     chain_strategy: string,
#                     error_strategy: string,
#                     actions: list[
#                         Action{
#                             timeout: float,
#                             retries: int,
#                             delay: float,
#                             plugin: string,
#                             **: Any
#                         }
#                     ]
#                 }
#             ]
#             executes: list[
#                 Group{
#                     name: string,
#                     chain_strategy: string,
#                     error_strategy: string,
#                     actions: list[
#                         Action{
#                             timeout: float,
#                             retries: int,
#                             delay: float,
#                             plugin: string,
#                             **: Any
#                         }
#                     ]
#                 }
#             ]
#         }
#     ]
# ]

# 日志(list[object])
[[logs]]
# 日志输出(string)
# 可选项: std/stdout/stderr/filepath
# 默认: "std"
output = ""
# 日志输出格式(string)
# 可选项: json/text
# 默认: text
output_format = "text"
# 日志等级(string)
# 指定最低日志等级
# 可选项: "CRITICAL", "ERROR", "WARNING", "INFO", "DEBUG"
# 默认: "INFO"
level = "DEBUG"
# 文本日志格式(string)
# 为brace-enclosed形式的字符串
# 可选项: asctime,时间;levelname,等级;name,名称;message,消息;
# 默认: "{levelname}: {message}"
text_format = "{asctime}.{msecs:03.0f} {name} {levelname}: {message}"
# 日志日期格式(string)
# 为StringFormatTime形式的字符串
# 默认: "%Y-%m-%d %H:%M:%S"
date_format = "%Y-%m-%d %H:%M:%S"
# 日志等级过滤(list[string])
# 指定启用的日志等级;
# 可选项: "CRITICAL", "ERROR", "WARNING", "INFO", "DEBUG"
# 默认: None
level_filters = []
# 日志名称过滤(list[string])
# 指定启用的监视器名称
# 默认: None
name_filters = []
# 日志内容过滤(list[string])
# 日志过滤正则表达式
# 默认: None
msg_filters = []

[[logs]]
output = "E:\\abc.log"
output_format = "json"
level = "DEBUG"
text_format = "{asctime} {levelname}: {message}"


# 监视器(list[object])
[[watchers]]
# 名称(string)
# 必选项, 字母数字下划线(3-15)
name = "watcher_name"
# 间隔时间(number)
# 单位: 秒
# 默认: 120
interval = 5
# 容忍次数(number)
# 单位: 次
# 默认: 0
tolerance = 3
# 表达式(string)
# 格式:
#     fetch_N, 为fetches返回的集合, N索引号;
#     empty, 空集合; any, 非空集合;
#     &, 交集; |, 并集; -, 差集; ^, 对称差集;
#     ==, 判断集合是否相等; !=, 判断集合是否不相等;
#     <=, 判断集合的子集; >=, 判断集合的超集;
#     <, 判断集合的真子集; >, 判断集合的真超集;
# 默认: "empty != empty"
expression = "empty != empty"


# 获取操作(list[object])
[[watchers.fetches]]
# 操作组名称(string)
# 必选项, 字母数字下划线(3-15)
name = "group_1"
# 执行策略(string)
# 可选项:
#   continue: 无条件继续执行
#   success_stop: 成功时停止执行
#   failure_stop: 失败时停止执行
# 默认: "continue"
chain_strategy = "continue"
# 结果策略(string)
# 可选项:
#   merge: 合并结果
#   overwrite: 替换结果
# 默认: "merge"
result_strategy = "merge"
# 评估发生错误时的处理策略(string)
# 可选项:
#   skip: 发生错误时不重置计数
#   reset: 发生错误时重置计数
# 默认: skip
error_strategy = "skip"

[[watchers.fetches.actions]]
# 超时时间(number)
# 单位: 秒
# 默认: 60
timeout = 120
# 重试次数(number)
# 单位: 次
# 默认: 0
retries = 3
# 重试间隔(number)
# 单位: 秒
# 默认: 1
delay = 1
# 插件名称(string)
# 必选项, 字母数字下划线(3-15)
plugin = "echo"
# 插件参数(Any)
arg1 = "arg1"
arg2 = "arg2"


# 更新操作(list[object])
[[watchers.executes]]
# 操作组名称(string)
# 必选项, 字母数字下划线(3-15)
name = "group_2"
# 执行策略(string)
# 可选项:
#   continue: 无条件继续执行
#   success_stop: 成功时停止执行
#   failure_stop: 失败时停止执行
# 默认: "continue"
chain_strategy = "continue"
# 结果策略(string)
# 可选项:
#   merge: 合并结果
#   overwrite: 替换结果
# 默认: "merge"
result_strategy = "merge"
# 评估发生错误时的处理策略(string)
# 可选项:
#   skip: 发生错误时不重置计数
#   reset: 发生错误时重置计数
#   fetch_reset: 仅fetch发生错误时重置计数
#   execute_reset: 仅execute发生错误时重置计数
# 默认: skip
error_strategy = "skip"

[[watchers.executes.actions]]
# 超时时间(number)
# 单位: 秒
# 默认: 60
timeout = 120
# 重试次数(number)
# 单位: 次
# 默认: 0
retries = 3
# 重试间隔(number)
# 单位: 秒
# 默认: 1
delay = 1
# 插件名称(string)
# 必选项, 字母数字下划线(3-15)
plugin = "echo"
# 插件参数(Any)
arg1 = "arg1"
arg2 = "arg2"
